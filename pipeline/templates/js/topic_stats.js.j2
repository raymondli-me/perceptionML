// Topic Statistics Display Functions

function populateTopicStats() {
    const content = document.getElementById('topic-stats-content');
    if (!content || !topicStatsData) {
        if (content) {
            content.innerHTML = '<p>No topic statistics available.</p>';
        }
        return;
    }
    
    let html = '';
    
    // Title
    html += '<h4 style="margin-top: 0;">Topic Profile Statistics (Top/Bottom 10%)</h4>';
    
    // Get outcome names
    const xOutcome = outcomesConfig[1]?.name || 'x';
    const yOutcome = outcomesConfig[0]?.name || 'y';
    
    // Sort topics by max impact probability
    const sortedTopics = [...topicStatsData].sort((a, b) => {
        // Use the pre-calculated max_impact_prob if available, otherwise calculate
        const maxA = a.max_impact_prob ? a.max_impact_prob * 100 : Math.max(
            a[`pct_${xOutcome}_high`] || 0,
            a[`pct_${xOutcome}_low`] || 0,
            a[`pct_${yOutcome}_high`] || 0,
            a[`pct_${yOutcome}_low`] || 0
        );
        const maxB = b.max_impact_prob ? b.max_impact_prob * 100 : Math.max(
            b[`pct_${xOutcome}_high`] || 0,
            b[`pct_${xOutcome}_low`] || 0,
            b[`pct_${yOutcome}_high`] || 0,
            b[`pct_${yOutcome}_low`] || 0
        );
        return maxB - maxA;
    });
    
    // Add count indicator
    html += `<p style="font-size: 11px; color: #999; margin-bottom: 10px;">Showing ALL ${sortedTopics.length} topics (ranked by highest extreme percentage)</p>`;
    
    // Simple table without scrollable container
    html += '<table style="width: 100%; border-collapse: collapse; font-size: 12px;">';
    html += '<thead>';
    html += '<tr style="border-bottom: 2px solid #666;">';
    html += '<th style="text-align: left; padding: 8px; width: 30%;">Topic (Keywords)</th>';
    html += '<th style="text-align: center; padding: 8px;">Size</th>';
    html += `<th style="text-align: center; padding: 8px;">% High ${outcomesConfig[1]?.display_name || 'X'}</th>`;
    html += `<th style="text-align: center; padding: 8px;">% Low ${outcomesConfig[1]?.display_name || 'X'}</th>`;
    html += `<th style="text-align: center; padding: 8px;">% High ${outcomesConfig[0]?.display_name || 'Y'}</th>`;
    html += `<th style="text-align: center; padding: 8px;">% Low ${outcomesConfig[0]?.display_name || 'Y'}</th>`;
    html += '</tr>';
    html += '</thead>';
    html += '<tbody>';
    
    sortedTopics.forEach((topic, index) => {
        // Extract keywords from label
        const keywords = topic.label || topic.keywords || `Topic ${topic.topic_id || index}`;
        const shortKeywords = keywords.split(',').slice(0, 3).join(', ');
        
        html += '<tr style="border-bottom: 1px solid #444;">';
        
        // Topic keywords
        html += `<td style="padding: 8px;" title="${keywords}">${shortKeywords}</td>`;
        
        // Size
        html += `<td style="text-align: center; padding: 8px;">${topic.size || 0}</td>`;
        
        // Get outcome names
        const xOutcome = outcomesConfig[1]?.name || 'x';
        const yOutcome = outcomesConfig[0]?.name || 'y';
        
        // % High X
        const pctHighX = topic[`pct_${xOutcome}_high`] || 0;
        html += `<td style="text-align: center; padding: 8px; ${getPercentageStyle(pctHighX)}">${pctHighX.toFixed(1)}%</td>`;
        
        // % Low X
        const pctLowX = topic[`pct_${xOutcome}_low`] || 0;
        html += `<td style="text-align: center; padding: 8px; ${getPercentageStyle(pctLowX)}">${pctLowX.toFixed(1)}%</td>`;
        
        // % High Y
        const pctHighY = topic[`pct_${yOutcome}_high`] || 0;
        html += `<td style="text-align: center; padding: 8px; ${getPercentageStyle(pctHighY)}">${pctHighY.toFixed(1)}%</td>`;
        
        // % Low Y
        const pctLowY = topic[`pct_${yOutcome}_low`] || 0;
        html += `<td style="text-align: center; padding: 8px; ${getPercentageStyle(pctLowY)}">${pctLowY.toFixed(1)}%</td>`;
        
        html += '</tr>';
    });
    
    html += '</tbody>';
    html += '</table>';
    
    // Footnotes
    html += '<div style="margin-top: 15px; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 5px; font-size: 11px; color: #999;">';
    
    // Get threshold values if available
    const xName = outcomesConfig[1]?.display_name || 'X';
    const yName = outcomesConfig[0]?.display_name || 'Y';
    
    html += '<p style="margin: 5px 0;"><strong>Note:</strong></p>';
    html += '<ul style="margin: 5px 0; padding-left: 20px;">';
    
    // For continuous mode, we always use fixed 10th/90th percentiles
    html += `<li>High ${xName}: Top 10% (≥90th percentile)</li>`;
    html += `<li>Low ${xName}: Bottom 10% (≤10th percentile)</li>`;
    html += `<li>High ${yName}: Top 10% (≥90th percentile)</li>`;
    html += `<li>Low ${yName}: Bottom 10% (≤10th percentile)</li>`;
    
    html += '<li>Topics ranked by highest percentage in any extreme group</li>';
    
    // Check if we're in zero_presence mode
    const isZeroPresenceMode = outcomesConfig.some(outcome => outcome.mode === 'zero_presence');
    
    if (isZeroPresenceMode) {
        html += '<li>In zero-presence mode, percentages use a gradient color scheme:</li>';
        html += '<ul style="margin: 5px 0; padding-left: 20px;">';
        html += '<li>Green gradient (70-100%): <span style="color: #388e3c;">70%</span> → <span style="color: #43a047;">75%</span> → <span style="color: #4caf50;">80%</span> → <span style="color: #66bb6a;">85%</span> → <span style="color: #81c784; font-weight: bold;">90-100%</span></li>';
        html += '<li>Red gradient (0-30%): <span style="color: #ef9a9a; font-weight: bold;">0-10%</span> → <span style="color: #e57373;">15%</span> → <span style="color: #ef5350;">20%</span> → <span style="color: #f44336;">25%</span> → <span style="color: #e53935;">30%</span></li>';
        html += '<li>Middle values (30-70%) are shown with subtle reduced emphasis</li>';
        html += '</ul>';
    } else {
        html += '<li>Percentages are color-coded: <span style="color: #ff5252;">Red (>30%)</span>, <span style="color: #ff9800;">Orange (20-30%)</span>, <span style="color: #ffeb3b;">Yellow (15-20%)</span></li>';
    }
    html += '</ul>';
    html += '</div>';
    
    content.innerHTML = html;
}

function getPercentageStyle(pct) {
    // Check if we're in zero_presence mode for either outcome
    const isZeroPresenceMode = outcomesConfig.some(outcome => outcome.mode === 'zero_presence');
    
    if (isZeroPresenceMode) {
        // For zero_presence mode: lighter colors for extremes (more salient on black background)
        if (pct >= 90) {
            return 'color: #81c784; font-weight: bold;'; // Light green for 90-100% (most salient)
        } else if (pct >= 85) {
            return 'color: #66bb6a; font-weight: bold;'; // Medium-light green for 85-90%
        } else if (pct >= 80) {
            return 'color: #4caf50; font-weight: bold;'; // Medium green for 80-85%
        } else if (pct >= 75) {
            return 'color: #43a047;'; // Medium-dark green for 75-80%
        } else if (pct >= 70) {
            return 'color: #388e3c;'; // Darker green for 70-75%
        } else if (pct <= 10) {
            return 'color: #ef9a9a; font-weight: bold;'; // Light red for 0-10% (most salient)
        } else if (pct <= 15) {
            return 'color: #e57373; font-weight: bold;'; // Medium-light red for 10-15%
        } else if (pct <= 20) {
            return 'color: #ef5350; font-weight: bold;'; // Medium red for 15-20%
        } else if (pct <= 25) {
            return 'color: #f44336;'; // Medium-dark red for 20-25%
        } else if (pct <= 30) {
            return 'color: #e53935;'; // Darker red for 25-30%
        } else {
            // Middle values (30-70%) - use default text color with slight opacity
            return 'opacity: 0.85;'; // Subtle de-emphasis, not gray
        }
    } else {
        // Original continuous mode coloring
        if (pct >= 30) {
            return 'color: #ff5252; font-weight: bold;'; // Red for very high
        } else if (pct >= 20) {
            return 'color: #ff9800; font-weight: bold;'; // Orange for high
        } else if (pct >= 15) {
            return 'color: #ffeb3b;'; // Yellow for moderate
        }
        return ''; // Default color for low percentages
    }
}